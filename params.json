{"name":"Backbone.comparator","tagline":"SQL style order declaration for Backbone collections","body":"# Backbone Comparator\r\n\r\nA comparator method that allows for declaring the order of a Backbone\r\ncollection much like you would declare order in SQL.\r\n\r\n* * *\r\n\r\nDefine an order property on the collection. This can be a string or a\r\nfunction that returns a string.\r\n\r\nTo order by a model's attribute `order: 'lastName'`\r\n\r\nTo order by the result of a method on the model and an '@' `order: '@fullName'`\r\n\r\nTo fall back to another value in case of a tie add 1 or more fallback\r\nvalues seperated by a comma `order: 'lastName, firstName'`\r\n\r\nThe order is ascending by default. To make it descending add 'desc' to\r\nthe value `order: 'lastName desc'`\r\n\r\nYou can change the order direction for fallback values as well `order:\r\n'lastName, firstName desc'`\r\n\r\n\r\n```javascript\r\nvar User = Backbone.Model.extend({\r\n  karma: function () {\r\n    return this.get('points') + this.get('upvotes');\r\n  }\r\n});\r\n\r\nvar Users = Backbone.Collection.extend({\r\n\r\n  // By firstName attribute in ascending order\r\n  order: 'firstName'\r\n\r\n  // By firstName attribute in descending order\r\n  order: 'firstName desc'\r\n\r\n  // By firstName in ascending order and fallback to last name in descending order\r\n  order: 'firstName, lastName desc'\r\n\r\n  // By method\r\n  order: '@karma'\r\n\r\n  // By method in descending order and fall back to attribute\r\n  order: '@karma desc, lastName'\r\n\r\n});\r\n\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}