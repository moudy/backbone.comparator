// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe('backbone.comparator', function() {
    var MyCollection, MyModel, collection;
    MyModel = (function(_super) {

      __extends(MyModel, _super);

      function MyModel() {
        return MyModel.__super__.constructor.apply(this, arguments);
      }

      MyModel.prototype.reversedName = function() {
        return this.get('name').split('').reverse().join('');
      };

      return MyModel;

    })(Backbone.Model);
    MyCollection = (function(_super) {

      __extends(MyCollection, _super);

      function MyCollection() {
        return MyCollection.__super__.constructor.apply(this, arguments);
      }

      MyCollection.prototype.model = MyModel;

      MyCollection.prototype.order = 'name';

      return MyCollection;

    })(Backbone.Collection);
    collection = null;
    describe('attribute ordering', function() {
      beforeEach(function() {
        var data;
        data = [
          {
            id: 1,
            name: 'B'
          }, {
            id: 3,
            name: 'A'
          }, {
            id: 2,
            name: 'C'
          }
        ];
        return collection = new MyCollection(data);
      });
      it('orders by attribute', function() {
        collection.sort();
        expect(collection.at(0).get('name')).toEqual('A');
        expect(collection.at(1).get('name')).toEqual('B');
        return expect(collection.at(2).get('name')).toEqual('C');
      });
      return it('orders by attribute in descending order', function() {
        collection.order = 'name desc';
        collection.sort();
        expect(collection.at(0).get('name')).toEqual('C');
        expect(collection.at(1).get('name')).toEqual('B');
        return expect(collection.at(2).get('name')).toEqual('A');
      });
    });
    describe('attribute ordering with fallback', function() {
      beforeEach(function() {
        var data;
        data = [
          {
            id: 1,
            name: 'A',
            price: 3
          }, {
            id: 3,
            name: 'C',
            price: 2
          }, {
            id: 2,
            name: 'A',
            price: 3
          }
        ];
        return collection = new MyCollection(data);
      });
      it('orders by attribute with a fallback', function() {
        collection.order = 'name, id';
        collection.sort();
        expect(collection.at(0).id).toEqual(1);
        expect(collection.at(1).id).toEqual(2);
        return expect(collection.at(2).id).toEqual(3);
      });
      it('orders by attribute with multiple fallbacks', function() {
        collection.order = 'name, price, id';
        collection.sort();
        expect(collection.at(0).id).toEqual(1);
        expect(collection.at(1).id).toEqual(2);
        return expect(collection.at(2).id).toEqual(3);
      });
      it('orders by attribute with a fallback in descending order', function() {
        collection.order = 'name desc, id desc';
        collection.sort();
        expect(collection.at(0).id).toEqual(3);
        expect(collection.at(1).id).toEqual(2);
        return expect(collection.at(2).id).toEqual(1);
      });
      return it('orders by attribute with a fallback with a different order', function() {
        collection.order = 'name, id desc';
        collection.sort();
        expect(collection.at(0).id).toEqual(2);
        expect(collection.at(1).id).toEqual(1);
        return expect(collection.at(2).id).toEqual(3);
      });
    });
    return describe('method ordering', function() {
      beforeEach(function() {
        var data;
        data = [
          {
            id: 1,
            name: 'AZ',
            price: 3
          }, {
            id: 3,
            name: 'CY',
            price: 2
          }, {
            id: 2,
            name: 'AX',
            price: 3
          }
        ];
        return collection = new MyCollection(data);
      });
      it('orders by the result of a method on a model', function() {
        collection.order = '@reversedName';
        collection.sort();
        expect(collection.at(0).id).toEqual(2);
        expect(collection.at(1).id).toEqual(3);
        return expect(collection.at(2).id).toEqual(1);
      });
      it('orders by the result of a method on a model in descending order', function() {
        collection.order = '@reversedName desc';
        collection.sort();
        expect(collection.at(2).id).toEqual(2);
        expect(collection.at(1).id).toEqual(3);
        return expect(collection.at(0).id).toEqual(1);
      });
      return it('orders by the attribute and falls back on method', function() {
        collection.order = 'price desc, @reversedName';
        collection.sort();
        expect(collection.at(0).id).toEqual(2);
        expect(collection.at(1).id).toEqual(1);
        return expect(collection.at(2).id).toEqual(3);
      });
    });
  });

}).call(this);
